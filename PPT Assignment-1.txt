//Q1.
//Input: nums = [2,7,11,15], target = 9
//Output0 [0,1]
// Solution
vector<int> question1(vector<int> &nums, int target)
{
    unordered_map<int, int> mp;
    for (int i = 0; i < nums.size(); i++)
    {
        int num = nums[i];
        int complement = target - num;
        auto it = mp.find(complement);
        if (it != mp.end())
        { // found
            return {it->second, i};
        }
        mp[num] = i;
    }

    return {};
}

//Q2
// Input: nums = [3,2,2,3], val = 3
//Output: 2, nums = [2,2,_,_]

int question2(vector<int>& nums, int val) {
        vector<int> ans;
        for(auto x: nums){
            if(x != val){
                ans.push_back(x);
            }

        }
        nums.clear();
        nums =ans;
        return ans.size();

    }
//Q3
//Input: nums = [1,3,5,6], target = 5
//Output: 2

int question3(vector<int>& nums, int target) {
        int low = 0;
        int high = nums.size()-1;

        while(low<=high){
            int mid = (low +high)/2;
            if(nums[mid]==target){
                return mid;
            }
            else if(nums[mid]<target){
                    low = mid+1;
            }else{
                high = mid-1;
            }
        }
       return low;
    }

//Q4
//Input: digits = [1,2,3]
//Output: [1,2,4]

vector<int> question4(vector<int>& v) {
        int n = v.size();
        for(int i = n-1; i >= 0; i--){
            if(i == n-1)
                v[i]++;
            if(v[i] == 10){
                v[i] = 0;
                if(i != 0){
                    v[i-1]++;
                }
                else{
                    v.push_back(0);
                    v[i] = 1;
                }
            }
        }
        return v;
    }

//Q5
//Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
//Output: [1,2,2,3,5,6]

void question5(vector<int> &nums1, int m, vector<int> &nums2, int n)
    {
        int i = 0;
        int j = 0;
        vector<int> ans;
        while (i < m && j < n)
        {
            if (nums1[i] <= nums2[j])
            {
                ans.push_back(nums1[i++]);
            }
            else
            {
                ans.push_back(nums2[j++]);
            }
        }
        while (i < m)
        {
            ans.push_back(nums1[i++]);
        }
        while (j < n)
        {
            ans.push_back(nums2[j++]);
        }

        nums1.clear();
        nums1 = ans;
    }


//Q6
//Input: nums = [1,2,3,1]
//Output: true

bool question6(vector<int>& nums) {
        unordered_set<int> s;
        for(auto &i: nums){
            if(s.count(i))return true;
            s.insert(i);
        }
        return false;
    }

//Q7
//Input: nums = [0,1,0,3,12]
//Output: [1,3,12,0,0]

void question7(vector<int>& nums) {
        int count = 0;
            for(int i =0; i<nums.size(); i++){
                    if(nums[i] !=0){
                            swap(nums[i],nums[count]);
                            count++;
                    }
            }
    }


//Q8
//nput: nums = [1,2,2,4]
//Output: [2,3]

int getMissingNo(vector<int> a)
{
    int n = a.size();
    int i = 0;
    while (i < n)
    {
        int correct = a[i] - 1;
        if (a[i] < n && a[i] != a[correct])
        {
            swap(a[i], a[correct]);
        }
        else
        {
            i++;
        }
    }

    for (int i = 0; i < n; i++)
    {
        if (i != a[i] - 1)
        {
            return i + 1;
        }
    }

    return n;
}

vector<int> solve(vector<int> arr)
{
    int n = arr.size();
    vector<int> ans;
    unordered_map<int, int> mp;
    for (int i = 0; i < n; i++)
    {
        mp[arr[i]]++;
        if (mp[arr[i]] == 2)
        {
            ans.push_back(arr[i]);
        }
    }
    int res = getMissingNo(arr);
    ans.push_back(res);
    return ans;
}